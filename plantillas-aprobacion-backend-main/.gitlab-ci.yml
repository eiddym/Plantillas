cache:
  paths:
    - node_modules/

stages:
  - build
  - test
  - deployment
  - delivery
  - scanning



# Instalando dependencias:
#   image: node:12-alpine
#   stage: build
#   tags:
#     - development
#   script:
#     - npm set registry http://repositorio.agetic.gob.bo/nexus/repository/npmjs
#     - npm set strict-ssl false
#     - npm install
#   only:
#     - develop
# Verificar paquetes:
#   image: node:12-alpine
#   stage: test
#   script:
#     - npm run audit
#   tags:
#     - development
#   only:
#     - develop
#   allow_failure: true
# ejecutando tests:
#   image: node:12-alpine
#   stage: test
#   script:
#     - npm run test
#   tags:
#     - development
#   only:
#     - develop
Generar imagen docker (Dev):
  image: gcr.io/kaniko-project/executor:debug-v0.23.0
  stage: deployment
  tags:
    - plantillas-formly-backend
  script:
    - echo $DOCKER_CONFIG_JSON | base64 -d > /kaniko/.docker/config.json
    - /kaniko/executor --context . --dockerfile ./Dockerfile --destination $DOCKER_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA
  only:
    - develop


Scanear con trivy:
  image: docker.io/aquasec/trivy:latest
  stage: scanning
  tags:
    - plantillas-formly-backend
  variables:
    GIT_STRATEGY: none
    IMAGE_NAME_DEV: $DOCKER_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy --download-db-only --no-progress --cache-dir .trivycache/
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format --template "@/contrib/gitlab.tpl" --output "gl-container-scanning-report.json" "$IMAGE_NAME_DEV"
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress "$IMAGE_NAME_DEV"
    - time trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$IMAGE_NAME_DEV"
  cache:
    paths:
      - .trivycache/
  # Necesita activar container scanning
  # artifacts:
  #   when: always
  #   reports:
  #     container-scanning: "gl-container-scanning-report.json"

Desplegando container (Dev):
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    - develop
  tags:
    - plantillas-formly-backend
  script:
    - echo $K8S_CONFIG | base64 -d > ./config.yml
    - echo $VALUES_DEV | base64 -d > ./values.yml
    - helm repo add --username "robot$"$HARBOR_USER --password $HARBOR_PASS repository $HARBOR_REPO
    - helm repo update
    - helm upgrade -i --force --debug plantillas-formly-backend-dev repository/$CHART_NAME --kubeconfig ./config.yml -f values.yml -n development --set gitlabCommit=$CI_COMMIT_SHORT_SHA --set container.version=dev-$CI_COMMIT_SHORT_SHA
Desplegando container (Test):
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    - testing
  tags:
    - plantillas-formly-backend
  script:
    - echo $K8S_CONFIG | base64 -d > ./config.yml
    - echo $VALUES_TEST | base64 -d > ./values.yml
    - helm repo add --username "robot$"$HARBOR_USER --password $HARBOR_PASS repository $HARBOR_REPO
    - helm repo update
    - helm upgrade -i --force --debug plantillas-formly-backend-test repository/$CHART_NAME --kubeconfig ./config.yml -f values.yml -n testing --set gitlabCommit=$CI_COMMIT_SHORT_SHA --set container.version=dev-$CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
Generando imagen docker (Release):
  image: gcr.io/kaniko-project/executor:debug-v0.23.0
  stage: deployment
  only:
    - tags
  except:
    - branches
  tags:
    - plantillas-formly-backend
  script:
    - echo $DOCKER_CONFIG_JSON | base64 -d > /kaniko/.docker/config.json
    - /kaniko/executor --context . --dockerfile ./Dockerfile --destination $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_TAG

Desplegando container (Release):
  when: manual
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    - tags
  except:
    - branches
  tags:
    - plantillas-formly-backend
  script:
    - echo $K8S_CONFIG | base64 -d > ./config.yml
    - echo $VALUES_RELEASE | base64 -d > ./values.yml
    - helm repo add --username "robot$"$HARBOR_USER --password $HARBOR_PASS repository $HARBOR_REPO
    - helm repo update
    - helm upgrade -i --force --debug plantillas-formly-backend-release repository/$CHART_NAME --kubeconfig ./config.yml -f values.yml -n release --set gitlabCommit=$CI_COMMIT_SHORT_SHA --set container.version=$CI_COMMIT_TAG
#Desplegando container (Release):
#  image: alpine/helm:3.1.3
#  stage: delivery
#  when: manual
#  only:
#    refs:
#      - test
#  tags:
#    - plantillas-formly-backend
#  script:
#    - echo $K8S_CONFIG | base64 -d > ./config.yml
#    - echo $VALUES_RELEASE | base64 -d > ./values.yml
#    - helm repo add --username "robot$"$HARBOR_USER --password $HARBOR_PASS repository $HARBOR_REPO
#    - helm repo update
#    - helm upgrade -i --debug plantillas-formly-backend-prod repository/$CHART_NAME --kubeconfig ./config.yml -f values.yml # -n testing
